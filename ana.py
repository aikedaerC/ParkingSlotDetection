# slash_shape_list = [0.00061257975, 0.00051177765, 0.0010385138, 0.0012211547, 6.270063e-05, 0.00032443958, 0.00024556209, 8.560195e-05, 0.04844719, 7.079984e-05, 0.914077, 0.004611903, 0.0005242787, 0.85523224, 0.014811179, 0.0024032108, 0.00057837175, 0.99453294, 0.0009367918, 0.0038757187, 0.0015623033, 0.0013416952, 0.0002565188, 0.0021146848, 0.0002350883, 7.082395e-05, 0.94846535, 0.9666472, 0.0005895917, 0.99091375, 0.0007683819, 0.00097397796, 0.00019299812, 5.633836e-05, 0.0004971249, 0.00020186808, 0.00046116914, 0.9535051, 0.00084850506, 0.00031729453, 0.99816304, 0.00019521143, 0.0006530334, 0.034769803, 0.0002838896, 0.0002677673, 0.01810151, 8.8457986e-05, 0.0019844878, 0.99977475, 0.0010471257, 0.0006210743, 0.0040361374, 0.9999566, 0.0045771697, 0.0010388809, 0.00021839901, 0.9982667, 0.0008843804, 0.9996251, 0.00042818292, 0.000692743, 0.00027433483, 
# 0.002191303, 0.00040833245, 8.9353685e-05, 0.0009061016, 0.00042704746, 0.00025578658, 0.0020667098, 0.00029827195, 9.7558244e-05, 0.002560381, 0.0013307198, 0.00033315452, 0.00038547188, 0.99963033, 0.00037177812, 0.9999479, 0.00035987777, 0.99993694, 0.00046761835, 1.3948877e-05, 0.9998223, 0.00017771548, 0.99987626, 0.0002155635, 2.2987999e-05, 0.99987626, 0.00018789628, 0.9998561, 0.00021690049, 4.3157404e-05, 0.9992643, 0.000279489, 9.975666e-05, 0.99977034, 0.00024721565, 0.00026189076, 0.9997284, 0.00025929417, 0.00029456426, 0.9998877, 0.00010485847, 0.9989706, 0.00014986783, 1.1887937e-05, 0.00045786225, 0.0017077611, 0.9601979, 0.998976, 0.0008693843, 0.0016635227, 0.00029787354, 0.0013838407, 0.0043513365, 0.00020313257, 0.0007700044, 0.0022504218, 0.00036908558, 0.00053195085, 0.0051743984, 0.00027367208, 0.00032565993, 0.0022890456, 0.00043548338, 0.00070155074, 0.0025221966, 0.0009046317, 0.9995437, 0.0009428909, 0.00012740333, 0.99996996, 0.0016593989, 0.00021664627, 0.9998111, 0.0017466713, 9.8611876e-05, 0.9999609, 0.00082723686, 8.344963e-05, 0.99990284, 0.00087855535, 9.139537e-05, 0.99445194, 0.0015591988, 0.00012663774, 0.0031473988, 0.00018053285, 0.0018609486, 0.00012161991, 0.0031798177, 0.00021602109, 0.0014728935, 0.00015929906, 0.00033976886, 0.0002880226, 0.00022846181, 0.00033620707, 0.00045894287, 0.00014286822, 0.00040104266, 0.0006500336, 0.00016317444, 0.0003605495, 0.00034787488, 0.000118149714, 0.00054547936, 0.0004995379, 6.868711e-05, 0.00036359872, 0.00052938994, 
# 0.9999665, 0.000117166666, 0.00029731062, 0.0007886623, 0.9999957, 0.00015352784, 0.00013125488, 0.00048785246, 0.99999774, 0.00044274254, 0.00027825957, 0.9999943, 0.0007505804, 0.0006047858, 0.9999912, 0.0022727447, 
# 0.0002944612, 0.9999738, 0.0023116276, 0.00034737808, 0.9999399, 0.0024284257, 0.0004509019, 0.99997807, 0.0041773277, 0.00045375412, 0.99997294, 0.009021323, 0.000502961, 0.9999747, 0.0037772558, 0.00045164672, 0.9999771, 0.0052538346, 0.00042300197, 0.9999709, 0.0028012893, 0.0004618268, 0.9999703, 0.0018097182, 0.00044181122, 0.99997103, 0.0036911448, 0.00048353348, 0.99997234, 0.00022212918, 0.00052756944, 0.9999862, 7.6212214e-05, 0.00013540323, 0.00086083135, 0.9999918, 0.0001543004, 0.00027690112, 0.0006424433, 0.9999342, 0.0010671492, 0.000809491, 0.00074840296, 6.987896e-05, 0.00077920675, 0.00046368764, 0.00042913688, 0.00022234554, 0.00044007818, 0.9157154, 0.00030515628, 0.00024066422, 0.98493713, 0.00032060652, 0.0002152548, 0.999782, 0.0003650427]

# rectangle = [0.00031908613, 0.00018523705, 0.99992394, 7.345224e-05, 0.00023215121, 0.99997735, 0.00045117576, 0.9998172, 0.99934834, 0.0005520034, 0.00028560017, 0.00014271626, 0.0016357189, 0.0010135744, 0.0010093619, 0.00014295788, 0.00028025743, 5.8757163e-05, 0.00024078104, 0.0003702177, 0.00058094325, 0.9996401, 0.0006303705, 0.00011267107, 0.00011699719, 0.00020450867, 0.00033727288, 0.0004963474, 0.99980193, 0.00049202616, 0.00073576, 9.833467e-05, 0.0009877896, 0.00039420885, 0.00013961423, 2.9139745e-05, 0.00012904464, 0.9988361, 0.00022027467, 9.795742e-05, 0.00017247928, 8.850558e-05, 0.0002760426, 0.00016507992, 0.00022769308, 0.0008700316, 0.00015590132, 0.9999958, 0.000112548856, 0.00042365168, 0.99991417, 0.0005323343, 0.00022443049, 0.9999752, 0.00021492012, 0.9999912, 0.00013615741, 0.00039789037, 0.99999774, 0.9993474, 0.0004757405, 0.00091247674, 0.0017566435, 0.99999976, 0.9999653, 0.002227372, 0.0030742122, 0.9999993, 0.9999968, 0.0005777527, 0.99996495, 0.0012381668, 0.0005713037, 0.9999989, 0.0008794402, 0.00054751476, 0.9999503, 0.0010806707, 0.0004578832, 0.99999845, 0.0005252513, 0.99986494, 0.0008658411, 0.0003615902, 0.00016279088, 0.0009382912, 0.00045701762, 0.0009113898, 0.9999994, 0.0011657359, 0.0010281238, 0.0006332594, 0.00045213825, 0.99999535, 0.00083361234, 0.001604905, 0.0008105966, 0.0006348956, 0.00047920702, 0.9999974, 0.00050606567, 0.0007937341, 0.99979895, 0.99991226, 0.0032542588, 0.00020725135, 0.9997936, 0.0011978301, 0.00038063657, 0.99982363, 0.0008362169, 0.99932337, 0.0009009736, 0.0003304204, 0.9999852, 0.00047736286, 0.00078944647, 0.00025856565, 0.0002319428, 0.0010740263, 0.0002505637, 0.0006042949, 0.00018884444, 0.99990463, 0.0009866388, 0.9999218, 0.00093737, 0.0010579419, 0.99998295, 0.00036616414, 0.999998, 0.00028753176, 0.00028566958, 0.9981304, 0.00035949578, 0.9999889, 0.00035880794, 0.9999877, 0.00024328177, 0.9999726, 0.99696773, 0.000318714, 0.00056161574, 0.99997497, 0.99992466, 0.00273992, 0.00092752854, 0.00083502184, 0.9999989, 0.0012169553, 0.00079161493, 0.9999318, 0.9986517, 0.0003317834, 0.00023828098, 0.9999529, 0.9999616, 0.0005134683, 0.0014418323, 0.00011162114, 
# 0.00041128387, 0.9999981, 0.0044979523, 0.00029150175, 0.9999988, 0.0005176949, 0.0002681582, 0.0003408213, 0.00027382243, 0.0012071426, 0.00029203307, 0.0004484752, 0.00049158593, 0.0009119887, 0.00027383678, 0.0013295554, 0.00032099558, 0.00051215343, 0.0007652992, 0.00026852533, 0.99991155, 0.00022262447, 0.00055456895, 0.9998869, 0.00031718868, 0.00082047685, 2.8000983e-05, 0.99979955, 0.0008438555, 0.9999573, 0.99971336, 0.003808939, 0.00090542756, 0.9998468, 0.9997143, 0.00044061843, 0.0008214907, 0.99932194, 0.99990857, 0.0010688656, 0.0001113198, 0.000171011, 0.0002915201, 0.9999168, 0.00020605828, 0.000231221, 0.9999057, 0.0009677657, 7.5642034e-05, 0.99952865, 0.00094647176, 0.0054639056, 0.999864, 0.0013209834, 0.0001541648, 0.00010000887, 0.00037079534, 0.00019743128, 0.00013830539, 0.0002739031, 0.00020334552, 0.00014197746, 0.0003376142, 3.1504045e-05, 0.92025656, 0.0005280615, 0.00055463694, 0.00038652428, 0.0004756042, 0.000458281, 0.0004665598, 0.0003963435, 0.00023508337, 0.00022461844, 0.00035821478, 0.0004288976, 0.0004224922, 0.9996394, 0.022429278, 0.00079289183, 0.0006917973, 0.00041988122, 0.999997, 0.9999808, 0.00025935227, 0.00028633984, 0.9999974, 0.99986136, 0.0016130583, 0.001089704, 0.99995613, 0.99985945, 0.002768654, 0.0004357302, 0.7255143, 0.99997175, 0.0011607552, 0.0007031108, 0.00036385065, 0.0001503869, 0.9996953, 0.9612262, 0.00036630066, 0.999962, 0.0016095709, 0.999783, 0.00043925756, 0.99978215, 0.00046175395, 0.999895, 0.0003607537, 0.00011810994, 9.979909e-05, 0.00035532733, 0.00012788227, 0.0007334523, 0.00079862983, 0.000345859, 7.730459e-05, 0.00022019258, 0.99993086, 0.00054474804, 3.297019e-05, 0.0001944051, 5.027055e-05, 0.00011611283, 7.086583e-05, 0.9993498, 0.00075591146, 0.0015887492, 0.0004128247, 0.999997, 0.00084468466, 0.00053223036, 0.9999865, 0.0003270616, 0.00041570337]


# import matplotlib.pyplot as plt

# slash_shape_list_left = [e for e in slash_shape_list if e < 0.5]
# slash_shape_list_right = [e for e in slash_shape_list if e > 0.5]

# rectangle_left = [e for e in rectangle if e < 0.5]
# rectangle_right = [e for e in rectangle if e > 0.5]
# import numpy as np

# print(f"slash_shape_list_left: {np.mean(slash_shape_list_left)}, {np.std(slash_shape_list_left)}")
# print(f"slash_shape_list_right: {np.mean(slash_shape_list_right)}, {np.std(slash_shape_list_right)}")
# print(f"rectangle_left: {np.mean(rectangle_left)}, {np.std(rectangle_left)}")
# print(f"rectangle_right: {np.mean(rectangle_right)}, {np.std(rectangle_right)}")

# plt.hist(slash_shape_list_left, bins=200, color='red', alpha=0.7, label="slash_shape_list")
# plt.hist(rectangle_left, bins=200, color='green', alpha=0.2, label="rectangle")

# plt.show()


import numpy as np
import matplotlib.pyplot as plt
# from mpl_toolkits.mplot3d import Axes3D
# from sklearn.metrics import precision_recall_curve, f1_score

# # Generate a range of precision and recall values
# precision_range = np.linspace(0, 1, num=100)
# recall_range = np.linspace(0, 1, num=100)

# # Create mesh grids for precision and recall
# precision_mesh, recall_mesh = np.meshgrid(precision_range, recall_range)

# # Calculate F1-score for each pair of precision and recall values
# f1_scores = 2 * (precision_mesh * recall_mesh) / (precision_mesh + recall_mesh)

# # Create a 3D plot
# fig = plt.figure(figsize=(10, 8))
# ax = fig.add_subplot(111, projection='3d')

# # Plot the 3D surface
# surface = ax.plot_surface(precision_mesh, recall_mesh, f1_scores, cmap='viridis')

# # Add labels and title
# ax.set_xlabel('Precision')
# ax.set_ylabel('Recall')
# ax.set_zlabel('F1-Score')
# ax.set_title('3D Plot: F1-Score, Precision, Recall')

# # Add color bar
# fig.colorbar(surface, ax=ax, shrink=0.5, aspect=10)

# # Show the plot
# plt.show()


def f1score(p, r):
    return 2 * p * r / (p + r)
    
def get_r(f1, p):
    return f1 * p / (2*p - f1)

def get_p(f1, r):
    return f1 * r / (2*r - f1)

r_t = np.linspace(0, 1, num=100)
# r_t = [0.9191919191919192, 0.9292929292929294, 0.9393939393939394, 0.9595959595959597, 0.9494949494949496, 0.9696969696969697, 0.9797979797979799, 0.98989898989899, 1.0]
p1 = []
r1 = []
p2 = []
r2 = []

tt = [0.92534, 0.95477]

for r_v in r_t:
    p_v = get_p(tt[0], r_v)
    if p_v>0 and p_v<1:
        p1.append(p_v)
        r1.append(r_v)
    
for r_v in r_t:
    p_v = get_p(tt[1], r_v)
    if p_v>0 and p_v<1:
        p2.append(p_v)
        r2.append(r_v)
for rt in r1:
    
# print(f"r:{r}, p:{p}")
plt.plot(r, p)
plt.show()


# one92 = {"r":[0.8686868686868687, 0.8787878787878789, 0.888888888888889, 0.8989898989898991, 0.9090909090909092, 0.9191919191919192, 0.9292929292929294, 0.9393939393939394, 0.9494949494949496, 0.9595959595959597, 0.9696969696969697, 0.9797979797979799, 0.98989898989899, 1.0], "p":[0.9898981656481906, 0.9771000204633157, 0.964908484685751, 0.953281428439471, 0.9421805348804533, 0.9315708783606926, 0.9214205573812437, 0.9117003742080577, 0.9023835543732456, 0.8934455003865177, 0.8848635748860411, 0.8766169092034541, 0.8686862339347307, 0.8610537286211454]}
# one95 = {"r":[0.9191919191919192, 0.9292929292929294, 0.9393939393939394, 0.9494949494949496, 0.9595959595959597, 0.9696969696969697, 0.9797979797979799, 0.98989898989899, 1.0], "p":[0.9932131328907904, 0.9816833834817296, 0.9706577893186509, 0.9601039904995593, 0.9499923385307385, 0.9402956181701735, 0.9309888028249927, 0.9220488388737751, 0.9134544550003347]}
# set1 = set(one92['p'])
# set2 = set(one95['p'])
# intersection = set1.intersection(set2)
# print(f"intgerset: p {intersection}")

# r {0.9191919191919192, 0.9292929292929294, 0.9393939393939394, 0.9595959595959597, 0.9494949494949496, 0.9696969696969697, 0.9797979797979799, 0.98989898989899, 1.0}